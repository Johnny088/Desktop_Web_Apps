// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopDB;

#nullable disable

namespace ShopDB.Migrations
{
    [DbContext(typeof(ShopDBContext))]
    partial class ShopDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductShop", b =>
                {
                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int>("ShopsId")
                        .HasColumnType("int");

                    b.HasKey("ProductsId", "ShopsId");

                    b.HasIndex("ShopsId");

                    b.ToTable("ProductShop");
                });

            modelBuilder.Entity("ShopDB.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Meat"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dairy products"
                        },
                        new
                        {
                            Id = 3,
                            Name = "drink"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Snack"
                        });
                });

            modelBuilder.Entity("ShopDB.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Miami"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Las Vegas"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 2,
                            Name = "Toronto"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            Name = "San Diego"
                        });
                });

            modelBuilder.Entity("ShopDB.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "The USA"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Brasil"
                        });
                });

            modelBuilder.Entity("ShopDB.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cashier"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mover"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Security"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Director"
                        });
                });

            modelBuilder.Entity("ShopDB.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<bool>("IsinStock")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductShopProductID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductShopShopID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ProductShopProductID", "ProductShopShopID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryID = 3,
                            Discount = 10f,
                            IsinStock = true,
                            Name = "Coca Cola",
                            Price = 3.10m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryID = 3,
                            Discount = 10f,
                            IsinStock = true,
                            Name = "Pepsi Cola",
                            Price = 3.10m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 3,
                            CategoryID = 1,
                            Discount = 10f,
                            IsinStock = true,
                            Name = "Chicken",
                            Price = 4.10m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 4,
                            CategoryID = 4,
                            Discount = 30f,
                            IsinStock = true,
                            Name = "Pringles",
                            Price = 2.50m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 5,
                            CategoryID = 2,
                            Discount = 30f,
                            IsinStock = true,
                            Name = "Milk",
                            Price = 2.10m,
                            Quantity = 100
                        });
                });

            modelBuilder.Entity("ShopDB.Entities.ProductShop", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("ShopID")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "ShopID");

                    b.ToTable("ProdustsShops");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            ShopID = 1
                        },
                        new
                        {
                            ProductID = 2,
                            ShopID = 1
                        },
                        new
                        {
                            ProductID = 3,
                            ShopID = 1
                        },
                        new
                        {
                            ProductID = 4,
                            ShopID = 1
                        },
                        new
                        {
                            ProductID = 5,
                            ShopID = 1
                        },
                        new
                        {
                            ProductID = 1,
                            ShopID = 2
                        },
                        new
                        {
                            ProductID = 2,
                            ShopID = 2
                        },
                        new
                        {
                            ProductID = 3,
                            ShopID = 2
                        },
                        new
                        {
                            ProductID = 4,
                            ShopID = 2
                        },
                        new
                        {
                            ProductID = 5,
                            ShopID = 2
                        },
                        new
                        {
                            ProductID = 1,
                            ShopID = 3
                        },
                        new
                        {
                            ProductID = 2,
                            ShopID = 3
                        },
                        new
                        {
                            ProductID = 3,
                            ShopID = 3
                        },
                        new
                        {
                            ProductID = 4,
                            ShopID = 3
                        },
                        new
                        {
                            ProductID = 5,
                            ShopID = 3
                        });
                });

            modelBuilder.Entity("ShopDB.Entities.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ParkingArea")
                        .HasColumnType("int");

                    b.Property<int?>("ProductShopProductID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductShopShopID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityID");

                    b.HasIndex("ProductShopProductID", "ProductShopShopID");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "3200 NW 79th St, FL 33147",
                            CityID = 1,
                            Name = "Walmart",
                            ParkingArea = 1000
                        },
                        new
                        {
                            Id = 2,
                            Address = "4505 W Charleston Blvd, NV 89102",
                            CityID = 2,
                            Name = "Walmart",
                            ParkingArea = 1000
                        },
                        new
                        {
                            Id = 3,
                            Address = "3412 College Ave, CA 92115 (Walmart Supercenter)",
                            CityID = 4,
                            Name = "Walmart",
                            ParkingArea = 1000
                        });
                });

            modelBuilder.Entity("ShopDB.Entities.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("PositionID")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ShopID")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("PositionID");

                    b.HasIndex("ShopID");

                    b.ToTable("Workers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Michael@outlook.com",
                            Name = "Michael",
                            PhoneNumber = "+1(213) 555-0198",
                            PositionID = 1,
                            Salary = 15m,
                            ShopID = 1,
                            Surname = "Thompson"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Martinez@outlook.com",
                            Name = "Sarah",
                            PhoneNumber = "+1(305) 555-4477",
                            PositionID = 3,
                            Salary = 18.50m,
                            ShopID = 1,
                            Surname = "Martinez"
                        },
                        new
                        {
                            Id = 3,
                            Email = "Lee@outlook.com",
                            Name = "Jonathan",
                            PhoneNumber = "+1(415) 555-7321",
                            PositionID = 4,
                            Salary = 38.50m,
                            ShopID = 1,
                            Surname = "Lee"
                        },
                        new
                        {
                            Id = 4,
                            Email = "Davis@outlook.com",
                            Name = "Angela",
                            PhoneNumber = "+1(646) 555-1184",
                            PositionID = 1,
                            Salary = 14.50m,
                            ShopID = 2,
                            Surname = "Davis"
                        },
                        new
                        {
                            Id = 5,
                            Email = "Brown@outlook.com",
                            Name = "Christopher",
                            PhoneNumber = "+1(702) 555-9033",
                            PositionID = 2,
                            Salary = 24m,
                            ShopID = 2,
                            Surname = "Brown"
                        },
                        new
                        {
                            Id = 6,
                            Email = "Brown@outlook.com",
                            Name = "Jessica",
                            PhoneNumber = "+1(312) 555-2765",
                            PositionID = 3,
                            Salary = 19m,
                            ShopID = 2,
                            Surname = "Johnson"
                        },
                        new
                        {
                            Id = 7,
                            Email = "Wilson@outlook.com",
                            Name = "Robert",
                            PhoneNumber = "+1(617) 555-8449",
                            PositionID = 4,
                            Salary = 38.50m,
                            ShopID = 2,
                            Surname = "Wilson"
                        },
                        new
                        {
                            Id = 8,
                            Email = "Garcia@outlook.com",
                            Name = "Emily",
                            PhoneNumber = "+1(818) 555-6620",
                            PositionID = 1,
                            Salary = 15.50m,
                            ShopID = 3,
                            Surname = "Garcia"
                        },
                        new
                        {
                            Id = 9,
                            Email = "Miller@outlook.com",
                            Name = "David",
                            PhoneNumber = "+1(480) 555-3917",
                            PositionID = 2,
                            Salary = 23m,
                            ShopID = 3,
                            Surname = "Miller"
                        },
                        new
                        {
                            Id = 10,
                            Email = "Rodriguez@outlook.com",
                            Name = "Ashley",
                            PhoneNumber = "+1(917) 555-0456",
                            PositionID = 3,
                            Salary = 17.75m,
                            ShopID = 3,
                            Surname = "Rodriguez"
                        },
                        new
                        {
                            Id = 11,
                            Email = "White@outlook.com",
                            Name = "Daniel",
                            PhoneNumber = "+1(214) 555-7832",
                            PositionID = 1,
                            Salary = 14.80m,
                            ShopID = 1,
                            Surname = "White"
                        },
                        new
                        {
                            Id = 12,
                            Email = "Lewis@outlook.com",
                            Name = "Megan",
                            PhoneNumber = "+1(503) 555-1290",
                            PositionID = 4,
                            Salary = 38.80m,
                            ShopID = 1,
                            Surname = "Lewis"
                        },
                        new
                        {
                            Id = 13,
                            Email = "Harris@outlook.com",
                            Name = "Benjamin",
                            PhoneNumber = "+1(404) 555-6814",
                            PositionID = 3,
                            Salary = 20m,
                            ShopID = 1,
                            Surname = "Harris"
                        },
                        new
                        {
                            Id = 14,
                            Email = "Clark@outlook.com",
                            Name = "Rachel",
                            PhoneNumber = "+1(619) 555-2245",
                            PositionID = 1,
                            Salary = 16m,
                            ShopID = 2,
                            Surname = "Clark"
                        },
                        new
                        {
                            Id = 15,
                            Email = "Taylor@outlook.com",
                            Name = "Anthony",
                            PhoneNumber = "+1(713) 555-9301",
                            PositionID = 2,
                            Salary = 25m,
                            ShopID = 2,
                            Surname = "Taylor"
                        },
                        new
                        {
                            Id = 16,
                            Email = "Allen@outlook.com",
                            Name = "Lauren",
                            PhoneNumber = "+1(720) 555-5789",
                            PositionID = 3,
                            Salary = 18m,
                            ShopID = 2,
                            Surname = "Allen"
                        },
                        new
                        {
                            Id = 17,
                            Email = "Young@outlook.com",
                            Name = "Brian",
                            PhoneNumber = "+1(323) 555-4472",
                            PositionID = 4,
                            Salary = 38.18m,
                            ShopID = 2,
                            Surname = "Young"
                        },
                        new
                        {
                            Id = 18,
                            Email = "King@outlook.com",
                            Name = "Stephanie",
                            PhoneNumber = "+1(801) 555-3640",
                            PositionID = 1,
                            Salary = 14.70m,
                            ShopID = 3,
                            Surname = "King"
                        },
                        new
                        {
                            Id = 19,
                            Email = "Scott@outlook.com",
                            Name = "Joshua",
                            PhoneNumber = "+1(916) 555-7128",
                            PositionID = 3,
                            Salary = 19m,
                            ShopID = 3,
                            Surname = "Scott"
                        },
                        new
                        {
                            Id = 20,
                            Email = "Baker@outlook.com",
                            Name = "Laura",
                            PhoneNumber = "+1(954) 555-2083",
                            PositionID = 3,
                            Salary = 22.50m,
                            ShopID = 3,
                            Surname = "Baker"
                        });
                });

            modelBuilder.Entity("ProductShop", b =>
                {
                    b.HasOne("ShopDB.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopDB.Entities.Shop", null)
                        .WithMany()
                        .HasForeignKey("ShopsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShopDB.Entities.City", b =>
                {
                    b.HasOne("ShopDB.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ShopDB.Entities.Product", b =>
                {
                    b.HasOne("ShopDB.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopDB.Entities.ProductShop", null)
                        .WithMany("Product")
                        .HasForeignKey("ProductShopProductID", "ProductShopShopID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShopDB.Entities.Shop", b =>
                {
                    b.HasOne("ShopDB.Entities.City", "City")
                        .WithMany("Shops")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopDB.Entities.ProductShop", null)
                        .WithMany("Shop")
                        .HasForeignKey("ProductShopProductID", "ProductShopShopID");

                    b.Navigation("City");
                });

            modelBuilder.Entity("ShopDB.Entities.Worker", b =>
                {
                    b.HasOne("ShopDB.Entities.Position", "Position")
                        .WithMany("Workers")
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopDB.Entities.Shop", "Shop")
                        .WithMany("Workers")
                        .HasForeignKey("ShopID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("ShopDB.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ShopDB.Entities.City", b =>
                {
                    b.Navigation("Shops");
                });

            modelBuilder.Entity("ShopDB.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ShopDB.Entities.Position", b =>
                {
                    b.Navigation("Workers");
                });

            modelBuilder.Entity("ShopDB.Entities.ProductShop", b =>
                {
                    b.Navigation("Product");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("ShopDB.Entities.Shop", b =>
                {
                    b.Navigation("Workers");
                });
#pragma warning restore 612, 618
        }
    }
}
